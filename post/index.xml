<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://codercql.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Sep 2019 17:29:44 +0800</lastBuildDate>
    
	<atom:link href="https://codercql.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据结构预算法（C语言）第二章读书笔记</title>
      <link>https://codercql.github.io/post/0901/</link>
      <pubDate>Sun, 01 Sep 2019 17:29:44 +0800</pubDate>
      
      <guid>https://codercql.github.io/post/0901/</guid>
      <description>数据结构预算法（C语言）第二章读书笔记 最大子序列和问题的解
给定一个数组，求出该数组的最大子序列
算法一： 穷举式，找出所有的子序列，并求其和来与最大值比较，时间复杂度为O(n3)
int MaxSubsequenceSum(const int a[],int N) { int ThisSum,MaxSum,i,j,k; MaxSum=0; for(i=0;i&amp;lt;N;i++) for(j=i;j&amp;lt;N;j++) { ThisSum=0; for(k=i;k&amp;lt;=j;k++) ThisSum=a[k]; if(ThisSum&amp;gt;MaxSum) MaxSum=ThisSum; } return MaxSum; }  算法二:对算法一进行优化时间复杂度O（n2）
int MaxSubSequenceSum(const int a[],int n) { int ThisSum,MaxSum,i,j; MaxSum=0; for(i=0;i&amp;lt;n;i++) { ThisSum=0; for(j=i;j&amp;lt;n;j++) { ThisSum+=a[j]; if(ThisSum&amp;gt;MaxSum) MaxSum=ThisSum; } } return MaxSum; }  算法三:花费时间是2T（N/2）+O(N)，时间复杂度O(NlogN)
static int MaxSubSum(const int a[],int Left,int Right) { int MaxLeftSum,MaxRightSum; int MaxLeftBorderSum,MaxRightBorderSum; int LeftBorderSum,RightBorderSum; int Center,i; if(Left==Right) if(a[Left&amp;gt;0]) return a[Left]; else return 0; Center=(Left+Right)/2; MaxLeftSum=MaxSubSum(a,Left,Center); MaxRightSum=MaxSubSum(a,Center+1,Right); MaxLeftBorderSum=0;LeftBorderSum=0; for(i=Center;i&amp;gt;=Left;i--) { LeftBorderSum+=a[i]; if(LeftBorderSum&amp;gt;MaxLeftBorderSum) MaxLeftBorderSum=LeftBorderSum; } MaxRightBorderSum=0;RightBorderSum=0; for(i=Center+1;i&amp;lt;=Right;i++) { RightBorderSum+=a[i]; if(RightBorderSum&amp;gt;MaxRightBorderSum) MaxRightBorderSum=RightBorderSum; } return MaxSubSum(MaxLeftsum,MaxRightSum,MaxLeftBoderSum+MaxRightBorderSum) } int MaxSubsequenceSum(const int a[],int n) { return MaxSubSum(a,0,n-1); }  算法四:类似一个数据流</description>
    </item>
    
    <item>
      <title>数据结构与算法分析第二章读书笔记</title>
      <link>https://codercql.github.io/post/bolg/</link>
      <pubDate>Fri, 02 Aug 2019 10:07:35 +0800</pubDate>
      
      <guid>https://codercql.github.io/post/bolg/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>